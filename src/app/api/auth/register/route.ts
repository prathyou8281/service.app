// import { NextResponse } from "next/server";
// import mysql, { RowDataPacket, ResultSetHeader } from "mysql2/promise";
// import bcrypt from "bcryptjs";
// import { cookies } from "next/headers"; // Cookie support for session

// // ‚úÖ Registration Request Body interface
// interface RegisterBody {
//   name: string;              // ‡¥Ø‡µÇ‡¥∏‡¥±‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥™‡µá‡¥∞‡µç (‡¥Ö‡¥®‡¥ø‡¥µ‡¥æ‡¥∞‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø‡¥§‡µç)
//   email: string;             // ‡¥Ø‡µÇ‡¥∏‡µº ‡¥á‡¥Æ‡µÜ‡¥Ø‡¥ø‡µΩ (‡¥Ö‡¥®‡¥ø‡¥µ‡¥æ‡¥∞‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø‡¥§‡µç)
//   password: string;          // ‡¥™‡¥æ‡¥∏‡µç‡¥∏‡µç‚Äå‡¥µ‡µá‡¥°‡µç (‡¥Ö‡¥®‡¥ø‡¥µ‡¥æ‡¥∞‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø‡¥§‡µç)
//   phone?: string;            // ‡¥´‡µã‡µ∫ ‡¥®‡¥Æ‡µç‡¥™‡µº (‡¥ì‡¥™‡µç‡¥∑‡¥£‡µΩ)
//   address?: string;          // ‡¥Ö‡¥°‡µç‡¥∞‡¥∏‡µç‡¥∏‡µç (‡¥ì‡¥™‡µç‡¥∑‡¥£‡µΩ)
//   city?: string;
//   state?: string;
//   country?: string;
//   pin_code?: string;
//   description?: string;      // Vendor short description (‡¥ì‡¥™‡µç‡¥∑‡¥£‡µΩ)
//   skills?: string;           // Technician skills (‡¥ì‡¥™‡µç‡¥∑‡¥£‡µΩ)
//   profile_photo?: string;    // Profile image URL (‡¥ì‡¥™‡µç‡¥∑‡¥£‡µΩ)
// }

// export async function POST(req: Request) {
//   let db: mysql.Connection | null = null;

//   try {
//     // 1Ô∏è‚É£ Request JSON parse ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
//     const body = (await req.json()) as RegisterBody;
//     const {
//       name,
//       email,
//       password,
//       phone,
//       address,
//       city,
//       state,
//       country,
//       pin_code,
//       description,
//       skills,
//       profile_photo,
//     } = body;

//     // 2Ô∏è‚É£ ‡¥Ö‡¥®‡¥ø‡¥µ‡¥æ‡¥∞‡µç‡¥Ø ‡¥´‡µÄ‡µΩ‡¥°‡µÅ‡¥ï‡µæ validate ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
//     if (!name || !email || !password) {
//       return NextResponse.json(
//         { success: false, message: "Name, Email, and Password are required." },
//         { status: 400 }
//       );
//     }

//     // 3Ô∏è‚É£ Password hash ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï (bcrypt)
//     const hashedPassword = await bcrypt.hash(password, 10);

//     // 4Ô∏è‚É£ DB-‡¥Ø‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥ï‡¥£‡¥ï‡µç‡¥ü‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
//     db = await mysql.createConnection({
//       host: process.env.DB_HOST,
//       port: Number(process.env.DB_PORT),
//       user: process.env.DB_USER,
//       password: process.env.DB_PASS,
//       database: process.env.DB_NAME,
//     });

//     // 5Ô∏è‚É£ Email duplicate check across all main tables
//     const [exists] = await db.query<RowDataPacket[]>(
//       `SELECT email FROM users WHERE email=? 
//        UNION SELECT email FROM vendors WHERE email=? 
//        UNION SELECT email FROM technicians WHERE email=?`,
//       [email, email, email]
//     );

//     if (exists.length > 0) {
//       return NextResponse.json(
//         { success: false, message: "Email already registered." },
//         { status: 409 }
//       );
//     }

//     // 6Ô∏è‚É£ Begin transaction
//     await db.beginTransaction();

//     // 7Ô∏è‚É£ Insert into users table
//     const [userResult] = await db.query<ResultSetHeader>(
//       `INSERT INTO users 
//        (name, email, password, phone, profile_photo, status, created_at, updated_at)
//        VALUES (?, ?, ?, ?, ?, 'active', NOW(), NOW())`,
//       [name, email, hashedPassword, phone || null, profile_photo || null]
//     );

//     const userId = userResult.insertId; // ‡¥Ø‡µÇ‡¥∏‡µº ID ‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥®‡µç‡¥®‡µÅ

//     // 8Ô∏è‚É£ Insert into users_addresses table if address provided
//     if (address || city || state || country || pin_code) {
//       await db.query(
//         `INSERT INTO users_addresses 
//          (user_id, address, city, state, country, pin_code, status, created_at, updated_at)
//          VALUES (?, ?, ?, ?, ?, ?, 'active', NOW(), NOW())`,
//         [userId, address || "", city || "", state || "", country || "", pin_code || ""]
//       );
//     }

//     // 9Ô∏è‚É£ Optional: Insert into vendors table if description exists
//     if (description) {
//       await db.query(
//         `INSERT INTO vendors 
//          (name, email, password, phone, description, profile_photo, status, created_at, updated_at)
//          VALUES (?, ?, ?, ?, ?, ?, 'active', NOW(), NOW())`,
//         [name, email, hashedPassword, phone || null, description, profile_photo || null]
//       );
//     }

//     // üîü Optional: Insert into technicians table if skills exist
//     if (skills) {
//       await db.query(
//         `INSERT INTO technicians 
//          (name, email, password, phone, skills, profile_photo, status, created_at, updated_at)
//          VALUES (?, ?, ?, ?, ?, ?, 'active', NOW(), NOW())`,
//         [name, email, hashedPassword, phone || null, skills, profile_photo || null]
//       );
//     }

//     // 1Ô∏è‚É£1Ô∏è‚É£ Commit transaction
//     await db.commit();

//     // 1Ô∏è‚É£2Ô∏è‚É£ Set user_id in HTTP-only cookie for session
//     const nextCookies = cookies();
//     nextCookies.set({
//       name: "user_id",
//       value: String(userId),
//       httpOnly: true,
//       path: "/",
//       maxAge: 60 * 60 * 24, // 1 day
//     });

//     // 1Ô∏è‚É£3Ô∏è‚É£ Success response
//     return NextResponse.json({
//       success: true,
//       message: "Registration successful",
//       user_id: userId,
//     });

//   } catch (err: any) {
//     // ‚ùå Error handling & rollback
//     if (db) await db.rollback();
//     console.error("Registration Error:", err.message);
//     return NextResponse.json({ success: false, message: err.message }, { status: 500 });

//   } finally {
//     // üîö Close DB connection
//     if (db) await db.end();
//   }
// }
